from web3 import Web3
import requests
import os
import time
from datetime import datetime
import sys

# –¢–≤–æ–∏ –∞–¥—Ä–µ—Å–∞
ADDRESSES = [
    '0x17e6D71D30d260e30BB7721C63539694aB02b036',
    '0x91dad140AF2800B2D660e530B9F42500Eee474a0',
    '0x4e7240952C21C811d9e1237a328b927685a21418',
    '0x3c2c34B9bB0b00145142FFeE68475E1AC01C92bA',
    '0x5A51f62D86F5CCB8C7470Cea2AC982762049c53c'
]

# Short names –¥–ª—è –≤—ã–≤–æ–¥–∞
SHORT_NAMES = {
    '0x17e6d71d30d260e30bb7721c63539694ab02b036': '1F_MMW',
    '0x91dad140af2800b2d660e530b9f42500eee474a0': '2F_MMS',
    '0x4e7240952c21c811d9e1237a328b927685a21418': '3F_BNB',
    '0x3c2c34b9bb0b00145142ffee68475e1ac01c92ba': '4F_Exodus',
    '0x5a51f62d86f5ccb8c7470cea2ac982762049c53c': '5F_BNB'
}

# Telegram config (–∏–∑ env –¥–ª—è GitHub Actions)
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8442392037:AAEiM_b4QfdFLqbmmc1PXNvA99yxmFVLEp8')
CHAT_ID = os.environ.get('CHAT_ID', '350766421')

# AAVE V3 Pool –Ω–∞ Arbitrum
POOL_ADDRESS = '0x794a61358D6845594F94dc1DB02A252b5b4814aD'
RPC_URL = 'https://arb1.arbitrum.io/rpc'

# –ü–æ–ª–Ω—ã–π ABI_POOL
ABI_POOL = [
    {
        "inputs": [{"internalType": "address", "name": "user", "type": "address"}],
        "name": "getUserAccountData",
        "outputs": [
            {"internalType": "uint256", "name": "totalCollateralBase", "type": "uint256"},
            {"internalType": "uint256", "name": "totalDebtBase", "type": "uint256"},
            {"internalType": "uint256", "name": "availableBorrowsBase", "type": "uint256"},
            {"internalType": "uint256", "name": "currentLiquidationThreshold", "type": "uint256"},
            {"internalType": "uint256", "name": "ltv", "type": "uint256"},
            {"internalType": "uint256", "name": "healthFactor", "type": "uint256"}
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getReservesList",
        "outputs": [{"internalType": "address[]", "name": "", "type": "address[]"}],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [{"internalType": "address", "name": "user", "type": "address"}],
        "name": "getUserConfigurationData",
        "outputs": [
            {"internalType": "DataTypes.UserConfigurationMap", "name": "", "type": "tuple"}
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {"internalType": "address", "name": "asset", "type": "address"},
            {"internalType": "address", "name": "user", "type": "address"}
        ],
        "name": "getUserReserveData",
        "outputs": [
            {"internalType": "uint256", "name": "currentATokenBalance", "type": "uint256"},
            {"internalType": "uint256", "name": "currentStableDebt", "type": "uint256"},
            {"internalType": "uint256", "name": "currentVariableDebt", "type": "uint256"},
            {"internalType": "uint256", "name": "principalStableDebt", "type": "uint256"},
            {"internalType": "uint256", "name": "scaledVariableDebt", "type": "uint256"},
            {"internalType": "uint256", "name": "stableBorrowRate", "type": "uint256"},
            {"internalType": "uint256", "name": "liquidityRate", "type": "uint256"},
            {"internalType": "uint40", "name": "stableRateLastUpdated", "type": "uint40"},
            {"internalType": "bool", "name": "usageAsCollateralEnabled", "type": "bool"}
        ],
        "stateMutability": "view",
        "type": "function"
    }
]

# ABI –¥–ª—è ERC20
ABI_ERC20 = [
    {"inputs": [], "name": "symbol", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"},
    {"inputs": [], "name": "decimals", "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}], "stateMutability": "view", "type": "function"}
]

def get_eth_price():
    """–¶–µ–Ω–∞ ETH –≤ USD"""
    try:
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd', timeout=10)
        response.raise_for_status()
        return response.json()['ethereum']['usd']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã ETH: {e}")
        return None

def get_token_price(symbol):
    """–¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –≤ USD"""
    if not symbol or symbol == 'ETH':
        return get_eth_price()
    try:
        response = requests.get(f'https://api.coingecko.com/api/v3/simple/price?ids={symbol.lower()}&vs_currencies=usd', timeout=10)
        response.raise_for_status()
        data = response.json()
        return list(data.values())[0]['usd'] if data else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã {symbol}: {e}")
        return None

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ TG"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
        print("TG-–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"TG –æ—à–∏–±–∫–∞: {e}")

def get_token_details(w3, reserve_address):
    """–î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–∞: symbol, decimals"""
    try:
        erc20 = w3.eth.contract(address=Web3.to_checksum_address(reserve_address), abi=ABI_ERC20)
        symbol = erc20.functions.symbol().call()
        decimals = erc20.functions.decimals().call()
        return symbol, decimals
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–∫–µ–Ω–∞: {e}")
        return 'UNKNOWN', 18

def monitor_aave_positions():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")  # Debug –¥–ª—è Actions
    w3 = Web3(Web3.HTTPProvider(RPC_URL))
    if not w3.is_connected():
        print("–û—à–∏–±–∫–∞ RPC.")
        return None
    
    pool = w3.eth.contract(address=Web3.to_checksum_address(POOL_ADDRESS), abi=ABI_POOL)
    reserves_list = pool.functions.getReservesList().call()
    
    eth_price = get_eth_price()
    
    # –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    days_ru = {
        'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '—Å—Ä–µ–¥–∞',
        'Thursday': '—á–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ø—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '—Å—É–±–±–æ—Ç–∞',
        'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    day_name = days_ru.get(datetime.now().strftime('%A'), '–¥–µ–Ω—å')
    hour = datetime.now().hour
    time_of_day = "—É—Ç—Ä–µ–Ω–Ω–∏–π" if hour < 12 else "–≤–µ—á–µ—Ä–Ω–∏–π"
    header = f"–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è {day_name} —Ç–≤–æ–π {time_of_day} AAVE –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    
    report = f"<b>{header}</b>\n\n"
    console_report = f"\n=== {header} ===\n"
    
    low_hf_warning = False
    
    for addr in ADDRESSES:
        short_name = SHORT_NAMES.get(addr.lower(), addr[:8] + '...')
        console_name = short_name
        tg_name = short_name
        
        try:
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç)
            result = pool.functions.getUserAccountData(Web3.to_checksum_address(addr)).call()
            total_collateral_base = result[0] / 1e8
            total_debt_base = result[1] / 1e8
            available_borrows_base = result[2] / 1e8
            liq_threshold = result[3] / 1e4
            ltv = result[4] / 1e4
            health_factor_raw = result[5]
            health_factor = health_factor_raw / 1e18  # –ó–¥–µ—Å—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!
            
            # HF –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —ç–º–æ–¥–∑–∏ (–ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞!)
            MAX_UINT256 = 2**256 - 1
            if health_factor_raw == MAX_UINT256:
                hf_display = '‚àû'
                emoji = 'üü¢'
                base_status = '–Ω–µ—Ç –¥–æ–ª–≥–∞'
            else:
                hf_display = "{0:.0f}".format(health_factor)
                if health_factor > 1.45:
                    emoji = 'üü¢'
                else:
                    emoji = 'üî¥'
                base_status = '–†–ò–°–ö –õ–ò–ö–í–ò–î–ê–¶–ò–ò!' if health_factor < 1 else '–ë–µ–∑–æ–ø–∞—Å–Ω–æ'
                if health_factor < 1.4:
                    low_hf_warning = True
            
            console_section = f"\n--- {console_name} ---\n"
            console_section += f"{emoji}Health Factor: {hf_display} ({base_status})\n"
            console_section += f"–ö–æ–ª–ª–∞—Ç–µ—Ä–∞–ª: ${total_collateral_base:,.0f} USD\n"
            console_section += f"–î–æ–ª–≥: ${total_debt_base:,.0f} USD\n"
            
            tg_section = f"<b>{tg_name}</b>\n"
            tg_section += f"{emoji}HF: <code>{hf_display}</code> ({base_status})\n"
            tg_section += f"–ö–æ–ª–ª–∞—Ç–µ—Ä–∞–ª: <code>${total_collateral_base:,.0f}</code>\n"
            tg_section += f"–î–æ–ª–≥: <code>${total_debt_base:,.0f}</code>\n"
            
            # –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            active_reserves = []
            details_console = ""
            details_tg = ""
            if total_collateral_base > 0 or total_debt_base > 0:
                try:
                    user_config = pool.functions.getUserConfigurationData(Web3.to_checksum_address(addr)).call()
                    config_map = user_config[0]  # uint256 bitmask
                    
                    for i, reserve_addr in enumerate(reserves_list):
                        if (config_map & (1 << i)) != 0:  # –ê–∫—Ç–∏–≤–µ–Ω
                            try:
                                user_reserve = pool.functions.getUserReserveData(reserve_addr, Web3.to_checksum_address(addr)).call()
                                a_balance = user_reserve[0]
                                stable_debt = user_reserve[1]
                                variable_debt = user_reserve[2]
                                if a_balance > 0 or stable_debt > 0 or variable_debt > 0:
                                    symbol, decimals = get_token_details(w3, reserve_addr)
                                    price = get_token_price(symbol)
                                    bal = a_balance / (10 ** decimals)
                                    debt = (stable_debt + variable_debt) / (10 ** decimals)
                                    a_usd = bal * price if price else 0
                                    d_usd = debt * price if price else 0
                                    active_reserves.append((symbol, bal, debt, a_usd, d_usd))
                            except Exception:
                                pass  # Skip bad reserve
                except Exception as config_e:
                    # –£–±—Ä–∞–ª–∏ –≤—ã–≤–æ–¥ "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π" ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏
                    pass
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ç–æ–ø-5
                if active_reserves:
                    active_reserves.sort(key=lambda x: x[3], reverse=True)
                    details_console = "–î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤:\n"
                    details_tg = "–ê–∫—Ç–∏–≤—ã:\n"
                    for sym, bal, debt, a_usd, d_usd in active_reserves[:5]:
                        details_console += f"  - {sym}: –ë–∞–ª–∞–Ω—Å {bal:.0f} (${a_usd:.0f}), –î–æ–ª–≥ {debt:.0f} (${d_usd:.0f})\n"
                        details_tg += f"‚Ä¢ <code>{sym}</code>: {bal:.0f} (${a_usd:.0f}) | –î–æ–ª–≥: {debt:.0f} (${d_usd:.0f})\n"
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é (—É–±—Ä–∞–ª–∏ "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø—É—Å—Ç–∞—è ‚Äî —Ç–æ–∂–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if details_console or details_tg:
                console_section += details_console
                tg_section += details_tg
            
            console_report += console_section
            report += tg_section + "\n"
            
        except Exception as e:
            error_msg = "–û–±—â–∞—è –æ—à–∏–±–∫–∞: {0}".format(e)
            console_report += f"\n--- {console_name} ---\n{error_msg}\n"
            report += f"<b>{tg_name}</b>: {error_msg}\n\n"
    
    console_report += "\n" + "="*50 + "\n"
    report += "=" * 50
    
    print(console_report)
    
    # TG –æ—Ç–ø—Ä–∞–≤–∫–∞
    if low_hf_warning:
        report = "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π HF —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π!</b>\n\n" + report
    send_telegram_message(report)
    
    return console_report

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        monitor_aave_positions()
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        sys.exit(0)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
